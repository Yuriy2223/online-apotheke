import { NextRequest, NextResponse } from "next/server";

interface KeyboardMarkup {
  keyboard: { text: string }[][];
  resize_keyboard?: boolean;
  one_time_keyboard?: boolean;
}

interface InlineKeyboardMarkup {
  inline_keyboard: { text: string; callback_data: string }[][];
}

interface Medicine {
  id: string;
  name: string;
  price: number;
  description: string;
  inStock: boolean;
}

interface CartItem {
  medicine: Medicine;
  quantity: number;
}

const medicines: Medicine[] = [
  {
    id: "1",
    name: "–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª",
    price: 25,
    description: "–ñ–∞—Ä–æ–∑–Ω–∏–∂—É—é—á–∏–π —Ç–∞ –∑–Ω–µ–±–æ–ª—é—é—á–∏–π –∑–∞—Å—ñ–±",
    inStock: true,
  },
  {
    id: "2",
    name: "–Ü–±—É–ø—Ä–æ—Ñ–µ–Ω",
    price: 45,
    description: "–ü—Ä–æ—Ç–∏–∑–∞–ø–∞–ª—å–Ω–∏–π —Ç–∞ –∑–Ω–µ–±–æ–ª—é—é—á–∏–π –ø—Ä–µ–ø–∞—Ä–∞—Ç",
    inStock: true,
  },
  {
    id: "3",
    name: "–í—ñ—Ç–∞–º—ñ–Ω C",
    price: 35,
    description: "–ê—Å–∫–æ—Ä–±—ñ–Ω–æ–≤–∞ –∫–∏—Å–ª–æ—Ç–∞ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —ñ–º—É–Ω—ñ—Ç–µ—Ç—É",
    inStock: true,
  },
  {
    id: "4",
    name: "–ê—Å–ø—ñ—Ä–∏–Ω",
    price: 30,
    description: "–ñ–∞—Ä–æ–∑–Ω–∏–∂—É—é—á–∏–π –∑–∞—Å—ñ–±",
    inStock: false,
  },
  {
    id: "5",
    name: "–í—ñ—Ç–∞–º—ñ–Ω D3",
    price: 120,
    description: "–î–ª—è –∑–º—ñ—Ü–Ω–µ–Ω–Ω—è –∫—ñ—Å—Ç–æ–∫ —Ç–∞ —ñ–º—É–Ω—ñ—Ç–µ—Ç—É",
    inStock: true,
  },
  {
    id: "6",
    name: "–ê–º–±—Ä–æ–∫—Å–æ–ª",
    price: 65,
    description: "–í—ñ–¥—Ö–∞—Ä–∫—É—é—á–∏–π –∑–∞—Å—ñ–± –ø—Ä–∏ –∫–∞—à–ª—ñ",
    inStock: true,
  },
];

// –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –∫–æ—à–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const userCarts: Map<number, CartItem[]> = new Map();
const userStates: Map<number, string> = new Map();

async function sendMessage(
  chatId: number,
  text: string,
  keyboard?: KeyboardMarkup | InlineKeyboardMarkup
) {
  const payload: {
    chat_id: number;
    text: string;
    parse_mode: string;
    reply_markup?: KeyboardMarkup | InlineKeyboardMarkup;
  } = {
    chat_id: chatId,
    text,
    parse_mode: "HTML",
  };

  if (keyboard) {
    payload.reply_markup = keyboard;
  }

  return fetch(
    `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    }
  );
}

async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  return fetch(
    `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/answerCallbackQuery`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text || "",
      }),
    }
  );
}

function getMainKeyboard(): KeyboardMarkup {
  return {
    keyboard: [
      [{ text: "üíä –ö–∞—Ç–∞–ª–æ–≥" }, { text: "üõí –ö–æ—à–∏–∫" }],
      [{ text: "üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" }, { text: "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞" }],
      [{ text: "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏" }],
    ],
    resize_keyboard: true,
  };
}

function getCatalogKeyboard(): InlineKeyboardMarkup {
  const buttons = medicines.map((med) => [
    {
      text: `${med.name} - ${med.price}‚Ç¥ ${med.inStock ? "‚úÖ" : "‚ùå"}`,
      callback_data: `medicine_${med.id}`,
    },
  ]);

  return { inline_keyboard: buttons };
}

function getMedicineKeyboard(medicineId: string): InlineKeyboardMarkup {
  return {
    inline_keyboard: [
      [
        {
          text: "‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫",
          callback_data: `add_to_cart_${medicineId}`,
        },
        { text: "‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data: `details_${medicineId}` },
      ],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data: "back_to_catalog" }],
    ],
  };
}

function getCartKeyboard(): InlineKeyboardMarkup {
  return {
    inline_keyboard: [
      [
        { text: "üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data: "clear_cart" },
        { text: "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "checkout" },
      ],
    ],
  };
}

function formatCart(chatId: number): string {
  const cart = userCarts.get(chatId) || [];

  if (cart.length === 0) {
    return "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π";
  }

  let text = "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n";
  let total = 0;

  cart.forEach((item, index) => {
    const itemTotal = item.medicine.price * item.quantity;
    total += itemTotal;
    text += `${index + 1}. <b>${item.medicine.name}</b>\n`;
    text += `   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${item.quantity} —à—Ç.\n`;
    text += `   –¶—ñ–Ω–∞ –∑–∞ —à—Ç.: ${item.medicine.price}‚Ç¥\n`;
    text += `   –°—É–º–∞: ${itemTotal}‚Ç¥\n\n`;
  });

  text += `üí∞ <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${total}‚Ç¥</b>`;

  return text;
}

function addToCart(chatId: number, medicineId: string): boolean {
  const medicine = medicines.find((m) => m.id === medicineId);
  if (!medicine || !medicine.inStock) return false;

  const cart = userCarts.get(chatId) || [];
  const existingItem = cart.find((item) => item.medicine.id === medicineId);

  if (existingItem) {
    existingItem.quantity += 1;
  } else {
    cart.push({ medicine, quantity: 1 });
  }

  userCarts.set(chatId, cart);
  return true;
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();

    // –û–±—Ä–æ–±–∫–∞ callback queries (inline –∫–Ω–æ–ø–∫–∏)
    if (body.callback_query) {
      const callbackQuery = body.callback_query;
      const chatId = callbackQuery.from.id;
      const data = callbackQuery.data;

      await answerCallbackQuery(callbackQuery.id);

      if (data === "back_to_catalog") {
        await sendMessage(
          chatId,
          "üíä <b>–ö–∞—Ç–∞–ª–æ–≥ –ª—ñ–∫—ñ–≤:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
          getCatalogKeyboard()
        );
      } else if (data.startsWith("medicine_")) {
        const medicineId = data.replace("medicine_", "");
        const medicine = medicines.find((m) => m.id === medicineId);

        if (medicine) {
          const text =
            `üíä <b>${medicine.name}</b>\n\n` +
            `üí∞ –¶—ñ–Ω–∞: ${medicine.price}‚Ç¥\n` +
            `üìù –û–ø–∏—Å: ${medicine.description}\n` +
            `üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: ${
              medicine.inStock ? "–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ‚úÖ" : "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ‚ùå"
            }`;

          await sendMessage(chatId, text, getMedicineKeyboard(medicineId));
        }
      } else if (data.startsWith("add_to_cart_")) {
        const medicineId = data.replace("add_to_cart_", "");
        const success = addToCart(chatId, medicineId);

        if (success) {
          await sendMessage(chatId, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫!");
        } else {
          await sendMessage(
            chatId,
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ."
          );
        }
      } else if (data.startsWith("details_")) {
        const medicineId = data.replace("details_", "");
        const medicine = medicines.find((m) => m.id === medicineId);

        if (medicine) {
          const text =
            `üìã <b>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n\n` +
            `üíä –ù–∞–∑–≤–∞: ${medicine.name}\n` +
            `üí∞ –¶—ñ–Ω–∞: ${medicine.price}‚Ç¥\n` +
            `üìù –û–ø–∏—Å: ${medicine.description}\n` +
            `üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: ${
              medicine.inStock ? "–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ‚úÖ" : "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ‚ùå"
            }\n\n` +
            `‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–π—Ç–µ—Å—å –∑ –ª—ñ–∫–∞—Ä–µ–º!`;

          await sendMessage(chatId, text);
        }
      } else if (data === "clear_cart") {
        userCarts.set(chatId, []);
        await sendMessage(chatId, "üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!");
      } else if (data === "checkout") {
        const cart = userCarts.get(chatId) || [];
        if (cart.length === 0) {
          await sendMessage(
            chatId,
            "‚ùå –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π! –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
          );
          return NextResponse.json({ ok: true });
        }

        userStates.set(chatId, "awaiting_phone");
        await sendMessage(
          chatId,
          "üìû –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n(—É —Ñ–æ—Ä–º–∞—Ç—ñ +380xxxxxxxxx)"
        );
      }

      return NextResponse.json({ ok: true });
    }

    // –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    const chatId = body?.message?.chat?.id;
    const text = body?.message?.text;
    const firstName = body?.message?.from?.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";

    if (!chatId || !text) {
      return NextResponse.json({ ok: true });
    }

    const userState = userStates.get(chatId);

    // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if (userState === "awaiting_phone") {
      const phoneRegex = /^\+380\d{9}$/;
      if (phoneRegex.test(text)) {
        userStates.set(chatId, "awaiting_address");
        await sendMessage(chatId, "üìç –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:");
      } else {
        await sendMessage(
          chatId,
          "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380xxxxxxxxx"
        );
      }
      return NextResponse.json({ ok: true });
    }

    // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
    if (userState === "awaiting_address") {
      const cart = userCarts.get(chatId) || [];
      const total = cart.reduce(
        (sum, item) => sum + item.medicine.price * item.quantity,
        0
      );

      // –û—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ —Ç–∞ —Å—Ç–∞–Ω—É
      userCarts.set(chatId, []);
      userStates.delete(chatId);

      const orderText =
        `‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n` +
        `üì¶ –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #${Date.now()}\n` +
        `üí∞ –°—É–º–∞: ${total}‚Ç¥\n` +
        `üìç –ê–¥—Ä–µ—Å–∞: ${text}\n\n` +
        `‚è∞ –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –ø—Ä–æ—Ç—è–≥–æ–º 30 —Ö–≤–∏–ª–∏–Ω –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.\n` +
        `üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ—Ç—è–≥–æ–º 1-2 –≥–æ–¥–∏–Ω.`;

      await sendMessage(chatId, orderText, getMainKeyboard());
      return NextResponse.json({ ok: true });
    }

    // –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    const greetings = [
      "–ø—Ä–∏–≤—ñ—Ç",
      "hello",
      "hi",
      "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å",
      "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è",
      "–≤—ñ—Ç–∞—é",
      "/start",
    ];
    const lowerText = text.toLowerCase();

    if (greetings.some((greeting) => lowerText.includes(greeting))) {
      await sendMessage(
        chatId,
        `üëã –í—ñ—Ç–∞—î–º–æ, ${firstName}!\n\nüè• <b>–û–Ω–ª–∞–π–Ω –ê–ø—Ç–µ–∫–∞ "${process.env.NEXT_PUBLIC_PHARMACY_NAME}"</b>\n\n–£ –Ω–∞—Å –≤–∏ –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ –ª—ñ–∫—ñ–≤\n‚Ä¢ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫\n‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è:`,
        getMainKeyboard()
      );
    } else if (text === "üíä –ö–∞—Ç–∞–ª–æ–≥") {
      await sendMessage(
        chatId,
        "üíä <b>–ö–∞—Ç–∞–ª–æ–≥ –ª—ñ–∫—ñ–≤:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        getCatalogKeyboard()
      );
    } else if (text === "üõí –ö–æ—à–∏–∫") {
      const cartText = formatCart(chatId);
      const cart = userCarts.get(chatId) || [];
      const keyboard = cart.length > 0 ? getCartKeyboard() : undefined;
      await sendMessage(chatId, cartText, keyboard);
    } else if (text === "üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è") {
      await sendMessage(
        chatId,
        "üì¶ <b>–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.\n–û—Ñ–æ—Ä–º—ñ—Ç—å —Å–≤–æ—î –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥!"
      );
    } else if (text === "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞") {
      const helpText =
        `‚ÑπÔ∏è <b>–î–æ–ø–æ–º–æ–≥–∞:</b>\n\n` +
        `üîπ <b>–ö–∞—Ç–∞–ª–æ–≥</b> - –ø–µ—Ä–µ–≥–ª—è–¥ —É—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ª—ñ–∫—ñ–≤\n` +
        `üîπ <b>–ö–æ—à–∏–∫</b> - –≤–∞—à—ñ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏\n` +
        `üîπ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> - —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫\n\n` +
        `‚ùì <b>–Ø–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n` +
        `1. –û–±–µ—Ä—ñ—Ç—å "–ö–∞—Ç–∞–ª–æ–≥"\n` +
        `2. –í–∏–±–µ—Ä—ñ—Ç—å –ª—ñ–∫–∏ —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –≤ –∫–æ—à–∏–∫\n` +
        `3. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ "–ö–æ—à–∏–∫" —Ç–∞ –æ—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n` +
        `4. –í–∫–∞–∂—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ –∞–¥—Ä–µ—Å—É\n` +
        `5. –û—á—ñ–∫—É–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É!\n\n` +
        `‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –ü–µ—Ä–µ–¥ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º –±—É–¥—å-—è–∫–∏—Ö –ª—ñ–∫—ñ–≤ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É–π—Ç–µ—Å—å –∑ –ª—ñ–∫–∞—Ä–µ–º!`;

      await sendMessage(chatId, helpText);
    } else if (text === "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏") {
      const contactText =
        `üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏:</b>\n\n` +
        `üè• –û–Ω–ª–∞–π–Ω –ê–ø—Ç–µ–∫–∞ "${process.env.NEXT_PUBLIC_PHARMACY_NAME}"\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${process.env.NEXT_PUBLIC_PHARMACY_PHONE}\n` +
        `üìß Email: ${process.env.NEXT_PUBLIC_PHARMACY_EMAIL}\n` +
        `üåê –°–∞–π—Ç: ${process.env.NEXT_PUBLIC_PHARMACY_WEBSITE}\n\n` +
        `üïê <b>–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:</b>\n` +
        `–ü–Ω-–ü—Ç: 08:00 - 22:00\n` +
        `–°–±-–ù–¥: 09:00 - 21:00\n\n` +
        `üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> –ø–æ –ö–∏—î–≤—É —Ç–∞ –æ–±–ª–∞—Å—Ç—ñ\n` +
        `‚è∞ <b>–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> 1-2 –≥–æ–¥–∏–Ω–∏`;

      await sendMessage(chatId, contactText);
    } else {
      await sendMessage(
        chatId,
        `‚ùì –ù–µ —Ä–æ–∑—É–º—ñ—é –∫–æ–º–∞–Ω–¥—É "${text}".\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.`,
        getMainKeyboard()
      );
    }

    return NextResponse.json({ ok: true });
  } catch (err) {
    console.error("Telegram error:", err);
    return NextResponse.json({ ok: false });
  }
}
